security:
    password_hashers:
        App\Domain\User\Entity\User: 'auto'
    providers:
        app_user_provider:
            entity:
                class: App\Domain\User\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        main:
            pattern: ^/api
            stateless: true
            jwt: ~
    access_control:
    - { path: ^/api/login_check, roles: PUBLIC_ACCESS }
    - { path: ^/api/auth/google, roles: PUBLIC_ACCESS }
    - { path: ^/api/new-user$, roles: PUBLIC_ACCESS, methods: [POST] }
    - { path: ^/api/me$, roles: ROLE_USER }
    - { path: ^/api, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
